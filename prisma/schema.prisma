// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  name                String 
  hash                String? 
  serverName          String?
  email               String         @unique 
  accountType         String  
  unipersonal         Unipersonal?
  company             Company?
  student             Student?
  employee            Employee?
  tags                Tag[]
  userServices        UserServices       @relation(fields: [userServiceId], references: [id], onDelete: Cascade)
  userServiceId       Int
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now())

  @@map("users")
}

model UserServices {
  id            Int           @id @default(autoincrement())
  api           Boolean       @default(false)
  webDownload   Boolean       @default(false)
  user          User? 

  @@map("user_services")
}

model Bill {
  id                  Int             @id @default(autoincrement())
  services            Json  
  amount              Decimal
  nextBillableDay     DateTime
  note                String
  payment             Payment?
  unipersonal         Unipersonal?     @relation(fields: [unipersonalId], references: [id])
  unipersonalId       String?
  company             Company?         @relation(fields: [companyId], references: [id])
  companyId           String? 
  student             Student?         @relation(fields: [studentId], references: [id])
  studentId           String?    
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())

  @@map("bills")
}

model Payment {
  id                  Int             @id @default(autoincrement())
  paymentStatus       String   
  amount              Decimal      
  paymentStartedAt    DateTime
  paymentDeadline     DateTime
  bill                Bill            @relation(fields: [billId], references: [id], onDelete: Cascade)
  billId              Int
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  @@map("payments")
}

model Unipersonal {
  id                  String              @id @default(uuid())
  phone               String
  address             Address?
  bill                Bill?
  user                User            @relation(fields: [userId], references: [id])
  userId              String         
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())

  @@map("unipersonal_info")
}

model Company {
  id                  String              @id @default(uuid())
  name                String
  phone               String
  address             Address?
  bill                Bill?
  employees           Employee[]
  user                User            @relation(fields: [userId], references: [id])
  userId              String         
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())

  @@map("conpany_info")
}

model Student {
  id                  String              @id @default(uuid())
  verified            Boolean             @default(false)
  phone               String
  bornAt              String
  schoolName          String
  studentId           String
  address             Address?
  bill                Bill?
  user                User            @relation(fields: [userId], references: [id])
  userId              String         
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())

  @@map("student_info")
}

model Employee {
  id                  String              @id @default(uuid())
  verified            Boolean             @default(false)
  user                User                @relation(fields: [userId], references: [id])
  userId              String  
  employer            Company             @relation(fields: [companyId], references: [id])
  companyId           String              @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())

  @@map("employee_info")
}

model Address {
  id                  String          @id @default(uuid())
  country             String
  provinceOrState     String          
  city                String
  address1            String
  address2            String
  postcode            String
  unipersonal         Unipersonal?    @relation(fields: [unipersonalId], references: [id], onDelete: Cascade)
  unipersonalId       String?  
  company             Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId           String?  
  student             Student?       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId           String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  @@map("addresses")
}

model Tag {
  id                  String          @id
  title               String          @unique
  users               User[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  @@map("tags")
}

// MozEconomia Admin
model meAdmin {
  id                  String         @id @default(uuid())
  name                String 
  email               String         @unique  
  hash                String 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())

  @@map("me_admins")
}