// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account Schemas
model User {
  id                  String         @id @default(uuid())
  name                String 
  hash                String? 
  serverName          String?
  email               String         @unique   
  customer            Customer?   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId          String?
  tags                Tag[]
  refreshToken        UserRefreshToken?
  services            UserService   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId           Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())

  @@map("users")
}

model UserService {
  id                  Int           @id @default(autoincrement())
  webDownload         Boolean       @default(false)
  apiAccess           Boolean       @default(false)
  user                User?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  @@map("user_services")
}

model UserRefreshToken {
  id                  String           @id @default(uuid())
  expiresIn           Int
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  @@map("user_refresh_token")
}

model Tag {
  id                  String          @id
  title               String          @unique
  users               User[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  @@map("tags")
}

// Bill Schamas
model Customer {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  phone               String
  accountType         String
  user                User?
  address             Address             @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId           String
  customerService     CustomerService     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId           Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())

  @@map("customers")
}

model CustomerService {
  id                  Int      @id @default(autoincrement())
  name                String
  billStatus          String   
  amount              Decimal      
  paymentStartedAt    DateTime
  paymentCompletedAt  DateTime? 
  expireAt            DateTime
  customer            Customer?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  @@map("customer_services")
}

model Address {
  id                  String      @id @default(uuid())
  country             String
  provinceOrState     String      @unique
  city                String
  address1            String
  address2            String
  zipCode             String
  customer            Customer?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  @@map("addresses")
}

// MozEconomia Admin
model meAdmin {
  id                  String         @id @default(uuid())
  name                String 
  email               String         @unique  
  hash                String 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())

  @@map("me_admins")
}